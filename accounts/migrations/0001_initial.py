# Generated by Django 4.0.3 on 2022-03-08 16:05

import django.core.validators
import phonenumber_field.modelfields
from django.db import migrations, models

import accounts.managers
import core_libs.utils
import core_libs.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Mark an item deleted without actually deleting it from database. I.e, soft deletion.",
                    ),
                ),
                ("deleted_at", models.DateTimeField(blank=True, help_text="Soft deletion date and time.", null=True)),
                ("created_by_id", models.IntegerField(help_text="User ID from the Authentication system", null=True)),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The creation time, always in Asia/Kolkata timezone."
                    ),
                ),
                ("updated_by_id", models.IntegerField(help_text="User ID from the Authentication system", null=True)),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="The last update time, always in Asia/Kolkata timezone."
                    ),
                ),
                ("first_name", models.CharField(help_text="User's first name", max_length=100)),
                ("last_name", models.CharField(help_text="User's last name", max_length=100)),
                (
                    "mobile_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="User's Mobile Number",
                        max_length=128,
                        null=True,
                        region=None,
                        unique=True,
                    ),
                ),
                ("email", models.EmailField(help_text="User's Email", max_length=254, unique=True)),
                ("is_email_verified", models.BooleanField(default=False, help_text="Is User's Email Verified")),
                ("is_mobile_verified", models.BooleanField(default=False, help_text="Is User's Mobile Verified")),
                ("is_staff", models.BooleanField(default=False, help_text="Is User Admin")),
                ("is_superuser", models.BooleanField(default=False, help_text="Is User a SuperUser")),
                (
                    "profile_picture",
                    models.ImageField(
                        default="accounts/images/default_user_icon.png",
                        help_text="Profile Image for a User",
                        upload_to=core_libs.utils.profile_picture_upload,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["jpg", "jpeg", "png", "svg"]
                            ),
                            core_libs.validators.file_size_validator,
                        ],
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "ordering": ["-id"],
            },
            managers=[
                ("objects", accounts.managers.CustomUserManager()),
            ],
        ),
    ]
